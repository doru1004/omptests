#
# Check if some required definitions were made by the user.
#

ifeq ($(HOSTRTL),)
  $(error HOSTRTL is not set)
endif
ifeq ($(TARGETRTL),)
  $(error TARGETRTL is not set)
endif
ifeq ($(GLOMPRTL),)
  $(error GLOMPRTL is not set)
endif
ifeq ($(LLVMBIN),)
  $(error LLVMBIN is not set)
endif
ifeq ($(DEVICE_TYPE),)
  DEVICE_TYPE := nvidia
  $(warning Warning: DEVICE_TYPE was not set but defaulted to nvidia. Can use one of: amd, nvidia, ppc64, none)
endif
ifeq ($(DEVICE_TYPE),nvidia)
  ifeq ($(CUDAVERSION),)
    $(error DEVICE_TYPE is nvidia but CUDAVERSION is not set)
  endif
endif

#
# Give meaningful defaults to device variables.
#

ifeq ($(DEVICE_TYPE),amd)
  ifeq ($(DEVICE_TARGET),)
    DEVICE_TARGET := amdgcn-amd-amdhsa
  endif
  ifeq ($(DEVICE_ARCH),)
    DEVICE_ARCH := gfx90a
  endif
else ifeq ($(DEVICE_TYPE),nvidia)
  ifeq ($(DEVICE_TARGET),)
    DEVICE_TARGET := nvptx64-nvidia-cuda
  endif
else ifeq ($(DEVICE_TYPE),ppc64)
  ifeq ($(DEVICE_TARGET),)
    DEVICE_TARGET := powerpc64-ibm-linux-gnu
  endif
endif

#
# Setup device specific options.
#
ifeq ($(DEVICE_TYPE),amd)
  TARGET_OFFLOAD_OPTIONS := -fopenmp-targets=$(DEVICE_TARGET) -fopenmp -Xopenmp-target=$(DEVICE_TARGET) -march=$(DEVICE_ARCH)
else ifeq ($(DEVICE_TYPE),nvidia)
  TARGET_OFFLOAD_OPTIONS := -fopenmp=libomp -fopenmp-targets=$(DEVICE_TARGET)
else ifeq ($(DEVICE_TYPE),ppc64)
  TARGET_OFFLOAD_OPTIONS := -fopenmp=libomp -fopenmp-targets=$(DEVICE_TARGET)
else ifeq ($(DEVICE_TYPE),none)
  TARGET_OFFLOAD_OPTIONS := -fopenmp
else
  $(error Support for $(DEVICE_TYPE) device not implemented yet!)
endif

#
# Compiler binaries 
#

CC=$(LLVMBIN)/clang
CXX=$(LLVMBIN)/clang++

ifeq ($(shell which $(CC)),)
  $(error $(CC) does not exist!)
endif
ifeq ($(shell which $(CXX)),)
  $(error $(CC) does not exist!)
endif

#
# Create default command for the target machine
#

machine := $(shell uname -m)

ifeq (HOST,1)
  machine := ppc64
endif

ifeq ($(machine),ppc64)
  ifneq ($(DEVICE_TYPE),ppc64)
    $(error Machine type ppc64 requires device type ppc64. Found device type: $(DEVICE_TYPE))
  endif
	cmdc += $(CC)
  cmdc += -I/usr/local/include
  cmdc += -I/usr/lib/gcc/ppc64-redhat-linux/4.4.7/include
  cmdc += -I/usr/include
  
  cmdx += $(CXX)
  cmdx += -I/usr/lib/gcc/ppc64-redhat-linux/4.4.7/../../../../include/c++/4.4.7
  cmdx += -I/usr/lib/gcc/ppc64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ppc64-redhat-linux
  cmdx += -I/usr/lib/gcc/ppc64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/backward
  cmdx += -I/usr/local/include
  cmdx += -I/usr/lib/gcc/ppc64-redhat-linux/4.4.7/include
  cmdx += -I/usr/include
  
  cmdx += -std=c++11
  
  cmdc += -L$(HOSTRTL) -L$(TARGETRTL) -target powerpc64-ibm-linux-gnu -mcpu=pwr7
  cmdx += -L$(HOSTRTL) -L$(TARGETRTL) -target powerpc64-ibm-linux-gnu -mcpu=pwr7
else ifeq ($(machine),ppc64le)
  cmdc += $(CC) -v 
  cmdc += -I$(HOSTRTL)
  cmdc += -I$(HOSTRTL)/../
  cmdc += -I$(HOSTRTL)/../projects/openmp/runtime/src/  

  cmdx += $(CXX)
  cmdx += -I$(HOSTRTL)
  cmdx += -I$(HOSTRTL)/../
  cmdx += -I$(HOSTRTL)/../projects/openmp/runtime/src/ 
  cmdx += -std=c++11 -v
  
  cmdc += -L$(HOSTRTL) -L$(TARGETRTL) -target powerpc64le-ibm-linux-gnu -mcpu=pwr8
  cmdx += -L$(HOSTRTL) -L$(TARGETRTL) -target powerpc64le-ibm-linux-gnu -mcpu=pwr8
else ifeq ($(machine),x86_64)
  cmdc += $(CC) -v
  cmdc += -I$(HOSTRTL)
  cmdc += -I$(HOSTRTL)/../
  cmdc += -I$(HOSTRTL)/../projects/openmp/runtime/src/

  cmdx += $(CXX)
  cmdx += -I$(HOSTRTL)
  cmdx += -I$(HOSTRTL)/../
  cmdx += -I$(HOSTRTL)/../projects/openmp/runtime/src/

  cmdx += -std=c++11 -v
  cmdc += -L$(HOSTRTL) -L$(TARGETRTL)
  cmdx += -L$(HOSTRTL) -L$(TARGETRTL)

  ifeq ($(DEVICE_TYPE),nvidia)
    cmdc += -target x86_64-pc-linux-gnu
    cmdx += -target x86_64-pc-linux-gnu
  endif

  extra_ld_lib_path := /home/compteam/opt/gcc/lib64
else
  $(error Support for $(machine) not implemented yet!)
endif

cmdc += $(TARGET_OFFLOAD_OPTIONS)
cmdx += $(TARGET_OFFLOAD_OPTIONS)

main_folder := $(shell pwd)
program := $(shell basename $(main_folder))
results_folder := $(main_folder)/results
error_log := $(results_folder)/error.log
compile_log := $(results_folder)/compile.log
compile_cmd := $(results_folder)/compile.cmd

#
# Make sure the libraries are visible 
#

LD_LIBRARY_PATH := $(HOSTRTL):$(TARGETRTL):$(GLOMPRTL):$(CUDAVERSION)/lib64:$(results_folder):$(extra_ld_lib_path)
export LD_LIBRARY_PATH
LIBRARY_PATH := $(GLOMPRTL):$(CUDAVERSION)/lib64:$(CUDAVERSION)/nvvm/libdevice
export LIBRARY_PATH
